% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/myStoSOO.R
\name{node}
\alias{node}
\title{R6 Class Representing a node in tree for StoSOO}
\description{
node object store specific information on each node in tree for StoSOO
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{depth}}{[numeric] Depth of this node}

\item{\code{position}}{[numeric] Position of this node}

\item{\code{xMin}}{[numeric] Minimum value of this node (cell)}

\item{\code{xMax}}{[numeric] Maximum value of this node (cell)}

\item{\code{xRepresentative}}{[numeric] Representative value of this node (cell)}

\item{\code{isLeaf}}{[logical] Is this node a leaf of the tree or not}

\item{\code{isMax}}{[logical] Does this node returns a maximum UCB in the layer or not}

\item{\code{isEvaluationFinished}}{[logical] Is evaluation of this node finished or not}

\item{\code{nEvals}}{[numeric] Number of evaluations for this node}

\item{\code{rewards}}{[numeric] Rewards evaluated (returned) by `maximizeFunc` for this node}

\item{\code{rewardMean}}{[numeric] Empirical average of `rewards`}

\item{\code{ucbValue}}{[numeric] Upper confidence bound of rewards}

\item{\code{nMaxEvalPerNode}}{[numeric] Maximum number of evaluations per leaf}

\item{\code{widthBase}}{[numeric] Base of width of the estimates of rewards}

\item{\code{maximizeFunc}}{[function] Function to be maximized given parameters scaled from 0 to 1.}

\item{\code{funcScale}}{[numeric] Scale for function to be optimized. If `maximize = TRUE`, `funcScale = 1`, and else `funcScale = -1`.}

\item{\code{withCheck}}{[logical] Check arguments for `node`, `layer`, and `tree` class or not}

\item{\code{verbose}}{[logical] Display information}

\item{\code{childrenNodes}}{[list] List of children nodes for this node (after the node is expanded)}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{node$new()}}
\item \href{#method-performEvaluation}{\code{node$performEvaluation()}}
\item \href{#method-expandNewNode}{\code{node$expandNewNode()}}
\item \href{#method-print}{\code{node$print()}}
\item \href{#method-clone}{\code{node$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Create a new node object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{node$new(
  depth,
  position,
  xMin,
  xMax,
  xRepresentative = NULL,
  isLeaf = TRUE,
  isMax = FALSE,
  isEvaluationFinished = FALSE,
  nEvals = 0,
  rewards = c(),
  rewardMean = 0,
  ucbValue = 0,
  nMaxEvalPerNode,
  widthBase,
  maximizeFunc,
  funcScale,
  withCheck = FALSE,
  verbose = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{depth}}{[numeric] Depth of this node}

\item{\code{position}}{[numeric] Position of this node}

\item{\code{xMin}}{[numeric] Minimum value of this node (cell)}

\item{\code{xMax}}{[numeric] Maximum value of this node (cell)}

\item{\code{xRepresentative}}{[numeric] Representative value of this node (cell)}

\item{\code{isLeaf}}{[logical] Is this node a leaf of the tree or not}

\item{\code{isMax}}{[logical] Does this node returns a maximum UCB in the layer or not}

\item{\code{isEvaluationFinished}}{[logical] Is evaluation of this node finished or not}

\item{\code{nEvals}}{[numeric] Number of evaluations for this node}

\item{\code{rewards}}{[numeric] Rewards evaluated (returned) by `maximizeFunc` for this node}

\item{\code{rewardMean}}{[numeric] Empirical average of `rewards`}

\item{\code{ucbValue}}{[numeric] Upper confidence bound of rewards}

\item{\code{nMaxEvalPerNode}}{[numeric] Maximum number of evaluations per leaf}

\item{\code{widthBase}}{[numeric] Base of width of the estimates of rewards}

\item{\code{maximizeFunc}}{[function] Function to be maximized given parameters scaled from 0 to 1.}

\item{\code{funcScale}}{[numeric] Scale for function to be optimized. If `maximize = TRUE`, `funcScale = 1`, and else `funcScale = -1`.}

\item{\code{withCheck}}{[logical] Check arguments for `node`, `layer`, and `tree` class or not}

\item{\code{verbose}}{[logical] Display information}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-performEvaluation"></a>}}
\if{latex}{\out{\hypertarget{method-performEvaluation}{}}}
\subsection{Method \code{performEvaluation()}}{
perform evaluation for this node (evaluate function and compute reward and UCB values)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{node$performEvaluation()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-expandNewNode"></a>}}
\if{latex}{\out{\hypertarget{method-expandNewNode}{}}}
\subsection{Method \code{expandNewNode()}}{
expand this node and create new children for the node
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{node$expandNewNode(nChildrenPerExpansion)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{nChildrenPerExpansion}}{[numeric] Number of children per expansion}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-print"></a>}}
\if{latex}{\out{\hypertarget{method-print}{}}}
\subsection{Method \code{print()}}{
Display information about the object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{node$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{node$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
